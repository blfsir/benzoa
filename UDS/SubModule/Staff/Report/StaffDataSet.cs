//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UDS.SubModule.Staff.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class StaffDataSet : DataSet {
        
        private StaffViewDataTable tableStaffView;
        
        public StaffDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected StaffDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["StaffView"] != null)) {
                    this.Tables.Add(new StaffViewDataTable(ds.Tables["StaffView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StaffViewDataTable StaffView {
            get {
                return this.tableStaffView;
            }
        }
        
        public override DataSet Clone() {
            StaffDataSet cln = ((StaffDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["StaffView"] != null)) {
                this.Tables.Add(new StaffViewDataTable(ds.Tables["StaffView"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableStaffView = ((StaffViewDataTable)(this.Tables["StaffView"]));
            if ((this.tableStaffView != null)) {
                this.tableStaffView.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "StaffDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StaffDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableStaffView = new StaffViewDataTable();
            this.Tables.Add(this.tableStaffView);
        }
        
        private bool ShouldSerializeStaffView() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void StaffViewRowChangeEventHandler(object sender, StaffViewRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StaffViewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStaff_Name;
            
            private DataColumn columnRealName;
            
            private DataColumn columnEmail;
            
            private DataColumn columnMobile;
            
            private DataColumn columnSexName;
            
            private DataColumn columnPosition_Name;
            
            internal StaffViewDataTable() : 
                    base("StaffView") {
                this.InitClass();
            }
            
            internal StaffViewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Staff_NameColumn {
                get {
                    return this.columnStaff_Name;
                }
            }
            
            internal DataColumn RealNameColumn {
                get {
                    return this.columnRealName;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn MobileColumn {
                get {
                    return this.columnMobile;
                }
            }
            
            internal DataColumn SexNameColumn {
                get {
                    return this.columnSexName;
                }
            }
            
            internal DataColumn Position_NameColumn {
                get {
                    return this.columnPosition_Name;
                }
            }
            
            public StaffViewRow this[int index] {
                get {
                    return ((StaffViewRow)(this.Rows[index]));
                }
            }
            
            public event StaffViewRowChangeEventHandler StaffViewRowChanged;
            
            public event StaffViewRowChangeEventHandler StaffViewRowChanging;
            
            public event StaffViewRowChangeEventHandler StaffViewRowDeleted;
            
            public event StaffViewRowChangeEventHandler StaffViewRowDeleting;
            
            public void AddStaffViewRow(StaffViewRow row) {
                this.Rows.Add(row);
            }
            
            public StaffViewRow AddStaffViewRow(string Staff_Name, string RealName, string Email, string Mobile, string SexName, string Position_Name) {
                StaffViewRow rowStaffViewRow = ((StaffViewRow)(this.NewRow()));
                rowStaffViewRow.ItemArray = new object[] {
                        Staff_Name,
                        RealName,
                        Email,
                        Mobile,
                        SexName,
                        Position_Name};
                this.Rows.Add(rowStaffViewRow);
                return rowStaffViewRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StaffViewDataTable cln = ((StaffViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StaffViewDataTable();
            }
            
            internal void InitVars() {
                this.columnStaff_Name = this.Columns["Staff_Name"];
                this.columnRealName = this.Columns["RealName"];
                this.columnEmail = this.Columns["Email"];
                this.columnMobile = this.Columns["Mobile"];
                this.columnSexName = this.Columns["SexName"];
                this.columnPosition_Name = this.Columns["Position_Name"];
            }
            
            private void InitClass() {
                this.columnStaff_Name = new DataColumn("Staff_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStaff_Name);
                this.columnRealName = new DataColumn("RealName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRealName);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnMobile = new DataColumn("Mobile", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMobile);
                this.columnSexName = new DataColumn("SexName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSexName);
                this.columnPosition_Name = new DataColumn("Position_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPosition_Name);
                this.columnStaff_Name.AllowDBNull = false;
                this.columnSexName.AllowDBNull = false;
                this.columnPosition_Name.AllowDBNull = false;
            }
            
            public StaffViewRow NewStaffViewRow() {
                return ((StaffViewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StaffViewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StaffViewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StaffViewRowChanged != null)) {
                    this.StaffViewRowChanged(this, new StaffViewRowChangeEvent(((StaffViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StaffViewRowChanging != null)) {
                    this.StaffViewRowChanging(this, new StaffViewRowChangeEvent(((StaffViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StaffViewRowDeleted != null)) {
                    this.StaffViewRowDeleted(this, new StaffViewRowChangeEvent(((StaffViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StaffViewRowDeleting != null)) {
                    this.StaffViewRowDeleting(this, new StaffViewRowChangeEvent(((StaffViewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStaffViewRow(StaffViewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StaffViewRow : DataRow {
            
            private StaffViewDataTable tableStaffView;
            
            internal StaffViewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStaffView = ((StaffViewDataTable)(this.Table));
            }
            
            public string Staff_Name {
                get {
                    return ((string)(this[this.tableStaffView.Staff_NameColumn]));
                }
                set {
                    this[this.tableStaffView.Staff_NameColumn] = value;
                }
            }
            
            public string RealName {
                get {
                    try {
                        return ((string)(this[this.tableStaffView.RealNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStaffView.RealNameColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableStaffView.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStaffView.EmailColumn] = value;
                }
            }
            
            public string Mobile {
                get {
                    try {
                        return ((string)(this[this.tableStaffView.MobileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStaffView.MobileColumn] = value;
                }
            }
            
            public string SexName {
                get {
                    return ((string)(this[this.tableStaffView.SexNameColumn]));
                }
                set {
                    this[this.tableStaffView.SexNameColumn] = value;
                }
            }
            
            public string Position_Name {
                get {
                    return ((string)(this[this.tableStaffView.Position_NameColumn]));
                }
                set {
                    this[this.tableStaffView.Position_NameColumn] = value;
                }
            }
            
            public bool IsRealNameNull() {
                return this.IsNull(this.tableStaffView.RealNameColumn);
            }
            
            public void SetRealNameNull() {
                this[this.tableStaffView.RealNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableStaffView.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableStaffView.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsMobileNull() {
                return this.IsNull(this.tableStaffView.MobileColumn);
            }
            
            public void SetMobileNull() {
                this[this.tableStaffView.MobileColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StaffViewRowChangeEvent : EventArgs {
            
            private StaffViewRow eventRow;
            
            private DataRowAction eventAction;
            
            public StaffViewRowChangeEvent(StaffViewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StaffViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
