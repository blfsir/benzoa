//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UDS.SubModule.WorkAttendance.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DetailDuty : DataSet {
        
        private DutyDetailDataTable tableDutyDetail;
        
        public DetailDuty() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DetailDuty(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DutyDetail"] != null)) {
                    this.Tables.Add(new DutyDetailDataTable(ds.Tables["DutyDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DutyDetailDataTable DutyDetail {
            get {
                return this.tableDutyDetail;
            }
        }
        
        public override DataSet Clone() {
            DetailDuty cln = ((DetailDuty)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DutyDetail"] != null)) {
                this.Tables.Add(new DutyDetailDataTable(ds.Tables["DutyDetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDutyDetail = ((DutyDetailDataTable)(this.Tables["DutyDetail"]));
            if ((this.tableDutyDetail != null)) {
                this.tableDutyDetail.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DetailDuty";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DetailDuty.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDutyDetail = new DutyDetailDataTable();
            this.Tables.Add(this.tableDutyDetail);
        }
        
        private bool ShouldSerializeDutyDetail() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DutyDetailRowChangeEventHandler(object sender, DutyDetailRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DutyDetailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDate;
            
            private DataColumn columnOnDutyTime;
            
            private DataColumn columnOffDutyTime;
            
            private DataColumn columnOffDutyMemo;
            
            private DataColumn columnOnDutyMemo;
            
            internal DutyDetailDataTable() : 
                    base("DutyDetail") {
                this.InitClass();
            }
            
            internal DutyDetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            internal DataColumn OnDutyTimeColumn {
                get {
                    return this.columnOnDutyTime;
                }
            }
            
            internal DataColumn OffDutyTimeColumn {
                get {
                    return this.columnOffDutyTime;
                }
            }
            
            internal DataColumn OffDutyMemoColumn {
                get {
                    return this.columnOffDutyMemo;
                }
            }
            
            internal DataColumn OnDutyMemoColumn {
                get {
                    return this.columnOnDutyMemo;
                }
            }
            
            public DutyDetailRow this[int index] {
                get {
                    return ((DutyDetailRow)(this.Rows[index]));
                }
            }
            
            public event DutyDetailRowChangeEventHandler DutyDetailRowChanged;
            
            public event DutyDetailRowChangeEventHandler DutyDetailRowChanging;
            
            public event DutyDetailRowChangeEventHandler DutyDetailRowDeleted;
            
            public event DutyDetailRowChangeEventHandler DutyDetailRowDeleting;
            
            public void AddDutyDetailRow(DutyDetailRow row) {
                this.Rows.Add(row);
            }
            
            public DutyDetailRow AddDutyDetailRow(System.DateTime Date, System.DateTime OnDutyTime, System.DateTime OffDutyTime, string OffDutyMemo, string OnDutyMemo) {
                DutyDetailRow rowDutyDetailRow = ((DutyDetailRow)(this.NewRow()));
                rowDutyDetailRow.ItemArray = new object[] {
                        Date,
                        OnDutyTime,
                        OffDutyTime,
                        OffDutyMemo,
                        OnDutyMemo};
                this.Rows.Add(rowDutyDetailRow);
                return rowDutyDetailRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DutyDetailDataTable cln = ((DutyDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DutyDetailDataTable();
            }
            
            internal void InitVars() {
                this.columnDate = this.Columns["Date"];
                this.columnOnDutyTime = this.Columns["OnDutyTime"];
                this.columnOffDutyTime = this.Columns["OffDutyTime"];
                this.columnOffDutyMemo = this.Columns["OffDutyMemo"];
                this.columnOnDutyMemo = this.Columns["OnDutyMemo"];
            }
            
            private void InitClass() {
                this.columnDate = new DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.columnOnDutyTime = new DataColumn("OnDutyTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnDutyTime);
                this.columnOffDutyTime = new DataColumn("OffDutyTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOffDutyTime);
                this.columnOffDutyMemo = new DataColumn("OffDutyMemo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOffDutyMemo);
                this.columnOnDutyMemo = new DataColumn("OnDutyMemo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnDutyMemo);
                this.columnOnDutyMemo.AllowDBNull = false;
            }
            
            public DutyDetailRow NewDutyDetailRow() {
                return ((DutyDetailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DutyDetailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DutyDetailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DutyDetailRowChanged != null)) {
                    this.DutyDetailRowChanged(this, new DutyDetailRowChangeEvent(((DutyDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DutyDetailRowChanging != null)) {
                    this.DutyDetailRowChanging(this, new DutyDetailRowChangeEvent(((DutyDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DutyDetailRowDeleted != null)) {
                    this.DutyDetailRowDeleted(this, new DutyDetailRowChangeEvent(((DutyDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DutyDetailRowDeleting != null)) {
                    this.DutyDetailRowDeleting(this, new DutyDetailRowChangeEvent(((DutyDetailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDutyDetailRow(DutyDetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DutyDetailRow : DataRow {
            
            private DutyDetailDataTable tableDutyDetail;
            
            internal DutyDetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDutyDetail = ((DutyDetailDataTable)(this.Table));
            }
            
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDutyDetail.DateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDutyDetail.DateColumn] = value;
                }
            }
            
            public System.DateTime OnDutyTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDutyDetail.OnDutyTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDutyDetail.OnDutyTimeColumn] = value;
                }
            }
            
            public System.DateTime OffDutyTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDutyDetail.OffDutyTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDutyDetail.OffDutyTimeColumn] = value;
                }
            }
            
            public string OffDutyMemo {
                get {
                    try {
                        return ((string)(this[this.tableDutyDetail.OffDutyMemoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDutyDetail.OffDutyMemoColumn] = value;
                }
            }
            
            public string OnDutyMemo {
                get {
                    return ((string)(this[this.tableDutyDetail.OnDutyMemoColumn]));
                }
                set {
                    this[this.tableDutyDetail.OnDutyMemoColumn] = value;
                }
            }
            
            public bool IsDateNull() {
                return this.IsNull(this.tableDutyDetail.DateColumn);
            }
            
            public void SetDateNull() {
                this[this.tableDutyDetail.DateColumn] = System.Convert.DBNull;
            }
            
            public bool IsOnDutyTimeNull() {
                return this.IsNull(this.tableDutyDetail.OnDutyTimeColumn);
            }
            
            public void SetOnDutyTimeNull() {
                this[this.tableDutyDetail.OnDutyTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOffDutyTimeNull() {
                return this.IsNull(this.tableDutyDetail.OffDutyTimeColumn);
            }
            
            public void SetOffDutyTimeNull() {
                this[this.tableDutyDetail.OffDutyTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOffDutyMemoNull() {
                return this.IsNull(this.tableDutyDetail.OffDutyMemoColumn);
            }
            
            public void SetOffDutyMemoNull() {
                this[this.tableDutyDetail.OffDutyMemoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DutyDetailRowChangeEvent : EventArgs {
            
            private DutyDetailRow eventRow;
            
            private DataRowAction eventAction;
            
            public DutyDetailRowChangeEvent(DutyDetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DutyDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
